[1,["b4oEY6dohLDpCEzvdQYK4Y"],["_effectAsset"],[["cc.Material",["_name","_techniqueData"],1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,3],[1,0,1,2,4]],[[[[0,"LabelShader_1",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[0],[0]],[[[1,"LabelShader_1",[{"hash":3704302072,"record":null,"name":"LabelShader_1|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform UARGS {\n  vec4 i_shadowColor;\n  vec4 i_outlineColor;\n  vec4 i_olShadowColor;\n  vec4 i_color1;\n  vec4 i_color2;\n  vec4 i_color3;\n  vec4 i_flColor;\n  vec2 i_resolution;\n  vec2 i_shadowOffset;\n  vec2 i_outlineWidth;\n  vec2 i_olShadowOffset;\n  float i_alpha;\n  float i_shadow;\n  float i_outline;\n  float i_olShadow;\n  float i_gradient;\n  float i_flowLight;\n  float i_flTime;\n  float i_flRot;\n  float i_flWidth;\n};\nconst float PI = 3.1415;\nconst float accuracy = 32.;\nfloat getA(vec2 p) {\n  float a = step(.0, p.x)*step(.0, p.y)*step(p.x, 1.)*step(p.y, 1.)*texture2D(texture, p).a;\n  return a;\n}\nvec4 transCol(vec4 c1, vec4 c2) {\n  float k = smoothstep(.0, 1., 1.-c1.a)*c2.a/(c1.a+c2.a);\n  vec4 c = vec4(.0);\n  c.rgb = mix(c1.rgb, c2.rgb, k);\n  c.a = c1.a+k*c2.a;\n  return c;\n}\nvoid main () {\n  float dw = .0;\n  dw += step(.5, i_shadow)*abs(i_shadowOffset.x);\n  dw += step(.5, i_outline)*abs(i_outlineWidth.x);\n  dw += step(.5, i_outline)*step(.5, i_olShadow)*abs(i_olShadowOffset.x);\n  float scale = 1.+dw;\n  vec2 uv = v_uv0*(scale-dw*.5);\n  uv -= step(.5, i_shadow)*i_shadowOffset*0.5;\n  vec2 olsuv = vec2(i_olShadowOffset.x+sign(i_olShadowOffset.x)*i_outlineWidth.x, i_olShadowOffset.y+sign(i_olShadowOffset.y)*i_outlineWidth.y);\n  uv -= step(.5, i_outline)*step(.5, i_olShadow)*olsuv*0.5;\n  vec4 col = vec4(.0);\n  float a = getA(uv);\n  col += step(1.5, i_gradient)*step(uv.y, .5)*mix(i_color1, i_color2, (uv.y+dw*.5)/(scale*.5));\n  col += step(1.5, i_gradient)*step(.5, uv.y)*mix(i_color2, i_color3, (uv.y-.5)/(scale*.5));\n  col += step(.5, i_gradient)*step(i_gradient, 1.5)*mix(i_color1, i_color2, uv.y);\n  col += step(i_gradient, .5)*i_color1;\n  col.rgb *= step(.0, a);\n  col.a *= a;\n  if(i_flowLight > .5) {\n    float rad = PI*i_flRot/180.;\n    float w = i_flWidth/cos(rad);\n    float tan_rad = tan(rad);\n    float t = fract(i_flTime)*(1.+w+abs(tan_rad))-w-step(.0, tan_rad)*abs(tan_rad);\n    float x = v_uv0.x-(1.-v_uv0.y)*tan(rad);\n    col.rgb = mix(col.rgb, i_flColor.rgb, step(t, x)*step(x, t+w)*(1.-smoothstep(.0, w*.5, abs(x-t-w*.5)))*i_flColor.a);\n  }\n  if(i_shadow > .5) {\n    vec4 sc = step(.5, i_shadow)*vec4(i_shadowColor.rgb, i_shadowColor.a*getA(vec2(uv)+i_shadowOffset));\n    col = transCol(col, sc);\n  }\n  if(i_outline > .5) {\n    float ola = .0;\n    float rot = PI*0.5;\n    vec2 tuv = uv+step(.5, i_shadow)*i_shadowOffset;\n    for(float i=.0;i<accuracy;i++) {\n      float rad = PI*2./accuracy*i;\n      for(float j=.0;j<8.;j++) {\n        vec2 uv_d;\n        uv_d.x = cos(rot)*cos(rad)*i_outlineWidth.y-sin(rot)*sin(rad)*i_outlineWidth.x;\n        uv_d.y = sin(rot)*cos(rad)*i_outlineWidth.y+cos(rot)*sin(rad)*i_outlineWidth.x;\n        uv_d *= j/8.;\n        ola += getA(tuv+uv_d);\n      }\n    }\n    ola /= accuracy*4.;\n    vec4 olc = step(.5, i_outline)*vec4(i_outlineColor.rgb, i_outlineColor.a*ola);\n    col = transCol(col, olc);\n  }\n  col.a *= i_alpha;\n  gl_FragColor = col;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 i_shadowColor;\nuniform vec4 i_outlineColor;\nuniform vec4 i_color1;\nuniform vec4 i_color2;\nuniform vec4 i_color3;\nuniform vec4 i_flColor;\nuniform vec2 i_shadowOffset;\nuniform vec2 i_outlineWidth;\nuniform vec2 i_olShadowOffset;\nuniform float i_alpha;\nuniform float i_shadow;\nuniform float i_outline;\nuniform float i_olShadow;\nuniform float i_gradient;\nuniform float i_flowLight;\nuniform float i_flTime;\nuniform float i_flRot;\nuniform float i_flWidth;\nconst float PI = 3.1415;\nconst float accuracy = 32.;\nfloat getA(vec2 p) {\n  float a = step(.0, p.x)*step(.0, p.y)*step(p.x, 1.)*step(p.y, 1.)*texture2D(texture, p).a;\n  return a;\n}\nvec4 transCol(vec4 c1, vec4 c2) {\n  float k = smoothstep(.0, 1., 1.-c1.a)*c2.a/(c1.a+c2.a);\n  vec4 c = vec4(.0);\n  c.rgb = mix(c1.rgb, c2.rgb, k);\n  c.a = c1.a+k*c2.a;\n  return c;\n}\nvoid main () {\n  float dw = .0;\n  dw += step(.5, i_shadow)*abs(i_shadowOffset.x);\n  dw += step(.5, i_outline)*abs(i_outlineWidth.x);\n  dw += step(.5, i_outline)*step(.5, i_olShadow)*abs(i_olShadowOffset.x);\n  float scale = 1.+dw;\n  vec2 uv = v_uv0*(scale-dw*.5);\n  uv -= step(.5, i_shadow)*i_shadowOffset*0.5;\n  vec2 olsuv = vec2(i_olShadowOffset.x+sign(i_olShadowOffset.x)*i_outlineWidth.x, i_olShadowOffset.y+sign(i_olShadowOffset.y)*i_outlineWidth.y);\n  uv -= step(.5, i_outline)*step(.5, i_olShadow)*olsuv*0.5;\n  vec4 col = vec4(.0);\n  float a = getA(uv);\n  col += step(1.5, i_gradient)*step(uv.y, .5)*mix(i_color1, i_color2, (uv.y+dw*.5)/(scale*.5));\n  col += step(1.5, i_gradient)*step(.5, uv.y)*mix(i_color2, i_color3, (uv.y-.5)/(scale*.5));\n  col += step(.5, i_gradient)*step(i_gradient, 1.5)*mix(i_color1, i_color2, uv.y);\n  col += step(i_gradient, .5)*i_color1;\n  col.rgb *= step(.0, a);\n  col.a *= a;\n  if(i_flowLight > .5) {\n    float rad = PI*i_flRot/180.;\n    float w = i_flWidth/cos(rad);\n    float tan_rad = tan(rad);\n    float t = fract(i_flTime)*(1.+w+abs(tan_rad))-w-step(.0, tan_rad)*abs(tan_rad);\n    float x = v_uv0.x-(1.-v_uv0.y)*tan(rad);\n    col.rgb = mix(col.rgb, i_flColor.rgb, step(t, x)*step(x, t+w)*(1.-smoothstep(.0, w*.5, abs(x-t-w*.5)))*i_flColor.a);\n  }\n  if(i_shadow > .5) {\n    vec4 sc = step(.5, i_shadow)*vec4(i_shadowColor.rgb, i_shadowColor.a*getA(vec2(uv)+i_shadowOffset));\n    col = transCol(col, sc);\n  }\n  if(i_outline > .5) {\n    float ola = .0;\n    float rot = PI*0.5;\n    vec2 tuv = uv+step(.5, i_shadow)*i_shadowOffset;\n    for(float i=.0;i<accuracy;i++) {\n      float rad = PI*2./accuracy*i;\n      for(float j=.0;j<8.;j++) {\n        vec2 uv_d;\n        uv_d.x = cos(rot)*cos(rad)*i_outlineWidth.y-sin(rot)*sin(rad)*i_outlineWidth.x;\n        uv_d.y = sin(rot)*cos(rad)*i_outlineWidth.y+cos(rot)*sin(rad)*i_outlineWidth.x;\n        uv_d *= j/8.;\n        ola += getA(tuv+uv_d);\n      }\n    }\n    ola /= accuracy*4.;\n    vec4 olc = step(.5, i_outline)*vec4(i_outlineColor.rgb, i_outlineColor.a*ola);\n    col = transCol(col, olc);\n  }\n  col.a *= i_alpha;\n  gl_FragColor = col;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"UARGS","binding":1,"members":[{"name":"i_shadowColor","type":16,"count":1},{"name":"i_outlineColor","type":16,"count":1},{"name":"i_olShadowColor","type":16,"count":1},{"name":"i_color1","type":16,"count":1},{"name":"i_color2","type":16,"count":1},{"name":"i_color3","type":16,"count":1},{"name":"i_flColor","type":16,"count":1},{"name":"i_resolution","type":14,"count":1},{"name":"i_shadowOffset","type":14,"count":1},{"name":"i_outlineWidth","type":14,"count":1},{"name":"i_olShadowOffset","type":14,"count":1},{"name":"i_alpha","type":13,"count":1},{"name":"i_shadow","type":13,"count":1},{"name":"i_outline","type":13,"count":1},{"name":"i_olShadow","type":13,"count":1},{"name":"i_gradient","type":13,"count":1},{"name":"i_flowLight","type":13,"count":1},{"name":"i_flTime","type":13,"count":1},{"name":"i_flRot","type":13,"count":1},{"name":"i_flWidth","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"LabelShader_1|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"i_shadowColor":{"type":16,"value":[0,0,0,0.5]},"i_outlineColor":{"type":16,"value":[0,0,0,1]},"i_olShadowColor":{"type":16,"value":[0,0,0,0.5]},"i_color1":{"type":16,"value":[1,0,0,1]},"i_color2":{"type":16,"value":[0,1,0,1]},"i_color3":{"type":16,"value":[0,0,1,1]},"i_flColor":{"type":16,"value":[1,1,1,1]},"i_resolution":{"type":14,"value":[1,1]},"i_shadowOffset":{"type":14,"value":[0.01,0.01]},"i_outlineWidth":{"type":14,"value":[0.01,0.01]},"i_olShadowOffset":{"type":14,"value":[0.01,0.01]},"i_alpha":{"type":13,"value":[1]},"i_shadow":{"type":13,"value":[0]},"i_outline":{"type":13,"value":[0]},"i_olShadow":{"type":13,"value":[0]},"i_gradient":{"type":13,"value":[0]},"i_flowLight":{"type":13,"value":[0]},"i_flTime":{"type":13,"value":[0]},"i_flRot":{"type":13,"value":[0]},"i_flWidth":{"type":13,"value":[0.05]},"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]]]]